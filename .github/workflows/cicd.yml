name: IronHack Final CICD

on:
  push:
    branches:
      - main  

jobs:
  apply-terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Plan
      run: terraform plan
      working-directory: ./terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./terraform

  build-containers:
    needs: apply-terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ivsancheza
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image for backend
        run: |
          docker build -t ivsancheza/expensy_backend:latest ./code/expensy_backend

      - name: Push Docker image to ACR for backend
        run: |
          docker push ivsancheza/expensy_backend:latest
    
      - name: Build Docker image for frontend
        run: |
          docker build -t ivsancheza/expensy_frontend:latest ./code/expensy_frontend

      - name: Push Docker image to ACR for frontend
        run: |
          docker push ivsancheza/expensy_frontend:latest
  
  helm-deployment:
    needs: build-containers
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group ironhack-final-rg2 --name ironhack-final-aks --overwrite-existing

      - name: Set up Kubernetes CLI
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Install NGINX Ingress Controller
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx --create-namespace --wait

      - name: Deploy Application
        run: |
          helm upgrade --install ironhack-final ./deployment/ironhack-final --wait

      - name: Get Ingress IP
        run: |
          kubectl get svc -n ingress-nginx ingress-nginx-controller

  set-up-monitoring:
    needs: helm-deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
  
      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group ironhack-final-rg2 --name ironhack-final-aks --overwrite-existing

      - name: Set up Kubernetes CLI
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up Kubernetes
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Add Helm repository
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Deploy Prometheus & Grafana
        run: |
          helm upgrade --install monitoring-stack prometheus-community/kube-prometheus-stack \
            --namespace monitoring --create-namespace \
            --set grafana.adminPassword=${{ secrets.GRAFANA_PASSWORD }}

      - name: Wait for pods to be ready
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n monitoring --timeout=300s
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=prometheus -n monitoring --timeout=300s

      - name: Verify deployment
        run: kubectl get pods -n monitoring